// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: persist.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersistService_QueryLogs_FullMethodName    = "/joblet.persist.PersistService/QueryLogs"
	PersistService_QueryMetrics_FullMethodName = "/joblet.persist.PersistService/QueryMetrics"
	PersistService_DeleteJob_FullMethodName    = "/joblet.persist.PersistService/DeleteJob"
)

// PersistServiceClient is the client API for PersistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PersistService is an INTERNAL service for joblet-core ←→ joblet-persist IPC communication.
//
// ⚠️  DO NOT USE DIRECTLY - This service is for internal communication only via Unix socket.
//
// Public API: Use JobService.QueryLogs() and JobService.QueryMetrics()
//
//	These methods proxy to this internal service automatically.
//
// This service is provided by joblet-persist subprocess and communicates via Unix socket IPC.
type PersistServiceClient interface {
	// Query logs for a job from disk storage
	QueryLogs(ctx context.Context, in *QueryLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLine], error)
	// Query metrics for a job from disk storage
	QueryMetrics(ctx context.Context, in *QueryMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metric], error)
	// Delete all persisted data for a job (admin only)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
}

type persistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersistServiceClient(cc grpc.ClientConnInterface) PersistServiceClient {
	return &persistServiceClient{cc}
}

func (c *persistServiceClient) QueryLogs(ctx context.Context, in *QueryLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLine], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PersistService_ServiceDesc.Streams[0], PersistService_QueryLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryLogsRequest, LogLine]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersistService_QueryLogsClient = grpc.ServerStreamingClient[LogLine]

func (c *persistServiceClient) QueryMetrics(ctx context.Context, in *QueryMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metric], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PersistService_ServiceDesc.Streams[1], PersistService_QueryMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryMetricsRequest, Metric]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersistService_QueryMetricsClient = grpc.ServerStreamingClient[Metric]

func (c *persistServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, PersistService_DeleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersistServiceServer is the server API for PersistService service.
// All implementations must embed UnimplementedPersistServiceServer
// for forward compatibility.
//
// PersistService is an INTERNAL service for joblet-core ←→ joblet-persist IPC communication.
//
// ⚠️  DO NOT USE DIRECTLY - This service is for internal communication only via Unix socket.
//
// Public API: Use JobService.QueryLogs() and JobService.QueryMetrics()
//
//	These methods proxy to this internal service automatically.
//
// This service is provided by joblet-persist subprocess and communicates via Unix socket IPC.
type PersistServiceServer interface {
	// Query logs for a job from disk storage
	QueryLogs(*QueryLogsRequest, grpc.ServerStreamingServer[LogLine]) error
	// Query metrics for a job from disk storage
	QueryMetrics(*QueryMetricsRequest, grpc.ServerStreamingServer[Metric]) error
	// Delete all persisted data for a job (admin only)
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	mustEmbedUnimplementedPersistServiceServer()
}

// UnimplementedPersistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersistServiceServer struct{}

func (UnimplementedPersistServiceServer) QueryLogs(*QueryLogsRequest, grpc.ServerStreamingServer[LogLine]) error {
	return status.Errorf(codes.Unimplemented, "method QueryLogs not implemented")
}
func (UnimplementedPersistServiceServer) QueryMetrics(*QueryMetricsRequest, grpc.ServerStreamingServer[Metric]) error {
	return status.Errorf(codes.Unimplemented, "method QueryMetrics not implemented")
}
func (UnimplementedPersistServiceServer) DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedPersistServiceServer) mustEmbedUnimplementedPersistServiceServer() {}
func (UnimplementedPersistServiceServer) testEmbeddedByValue()                        {}

// UnsafePersistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersistServiceServer will
// result in compilation errors.
type UnsafePersistServiceServer interface {
	mustEmbedUnimplementedPersistServiceServer()
}

func RegisterPersistServiceServer(s grpc.ServiceRegistrar, srv PersistServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersistService_ServiceDesc, srv)
}

func _PersistService_QueryLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersistServiceServer).QueryLogs(m, &grpc.GenericServerStream[QueryLogsRequest, LogLine]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersistService_QueryLogsServer = grpc.ServerStreamingServer[LogLine]

func _PersistService_QueryMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersistServiceServer).QueryMetrics(m, &grpc.GenericServerStream[QueryMetricsRequest, Metric]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PersistService_QueryMetricsServer = grpc.ServerStreamingServer[Metric]

func _PersistService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistService_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersistService_ServiceDesc is the grpc.ServiceDesc for PersistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "joblet.persist.PersistService",
	HandlerType: (*PersistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteJob",
			Handler:    _PersistService_DeleteJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryLogs",
			Handler:       _PersistService_QueryLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryMetrics",
			Handler:       _PersistService_QueryMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "persist.proto",
}
